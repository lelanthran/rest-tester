Curl
----

Add in curl support. I am considering downloading curl and making it part of the
library (so that it is statically compiled in), but this has some serious downsides,
namely that an update to curl will not update the statically linked curl.

Maybe just link it normally.


Symbol Table - Serializable
---------------------------

Add support for reading/writing symbol table chain to a file. This is more involved
than it looks because symbol tables do not currently contain pointers to chidren.

One option is to have the format consist of an array of symbol tables (sans
duplicates), so that the caller can simply provide a list of symbols tables to
serialise and the output is built in-memory (with duplicates being removed) and
written after it is completely built in memory.

When reading back the tables:
1. We first read each table (keeping track of the parent name)
2. After reading all tables, we go through them and assign the correct parent
   pointer.

A better option is to add support for children in a symbol table. This means that on
creation the symt_new() function will update the parent's child-list, and on
deletion will remove itself from the parent's child-list.



Symbol Table - Symbol Search
----------------------------

When a search fails the searching function must try getting a value from the
environment.




Error Reporting
---------------

Writing all errors to stderr makes this unsuitable for a library. Maybe allocate a
big chunk of memory at startup (say, 1MB) which is populated as a circular buffer
with the errors. This lets the caller decide how to display the error messages.




Assertions
----------

Have a large problem with assertions: how can we tell when they end? We lose
the newlines during the tokenisation.

It might be best for assertions to always end with a semi-colon, and have the
tokeniser return the semi-colon seperately from the string.

